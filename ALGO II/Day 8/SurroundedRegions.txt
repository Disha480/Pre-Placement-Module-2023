class Solution {
    public void solve(char[][] board) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i = 0 ; i < board.length ; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (i == 0 || i == board.length - 1 || j == 0 || j == board[0].length - 1) {
                    if (board[i][j] == 'O') {
                        dfs(board,i,j,visited);
                    }
                }
            }
        }

        for (int i = 0 ; i < board.length ; i++){
            for(int j = 0 ; j < board[0].length ; j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
                if(board[i][j] == 'T'){
                    board[i][j] = 'O';
                }
            }
        }
    }
    
     private void dfs(char[][] board,int i,int j,boolean[][] visited){
        if(i< 0 || i>= board.length || j <0 || j >= board[0].length || board[i][j] == 'X' || visited[i][j] == true)
            return;
        visited[i][j]=true;
        board[i][j] = 'T';
        dfs(board,i+1,j,visited);
        dfs(board,i-1,j,visited);
        dfs(board,i,j+1,visited);
        dfs(board,i,j-1,visited);
    }
}